-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateDistanceFor is
port (
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
    firstBit : IN STD_LOGIC;
    secondBit : IN STD_LOGIC;
    previousDistance : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of calculateDistanceFor is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal xor_ln233_fu_48_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln233_1_fu_54_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln233_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln233_1_fu_54_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln233_fu_66_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln233_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln233_fu_74_p2 : STD_LOGIC_VECTOR (7 downto 0);


begin



    add_ln233_fu_74_p2 <= std_logic_vector(unsigned(previousDistance) + unsigned(select_ln233_fu_66_p3));
    and_ln233_fu_60_p2 <= (xor_ln233_fu_48_p2 and xor_ln233_1_fu_54_p2);
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        add_ln233_fu_74_p2 when (or_ln233_fu_80_p2(0) = '1') else 
        previousDistance;
    or_ln233_fu_80_p2 <= (xor_ln233_fu_48_p2 or xor_ln233_1_fu_54_p2);
    select_ln233_fu_66_p3 <= 
        ap_const_lv8_2 when (and_ln233_fu_60_p2(0) = '1') else 
        ap_const_lv8_1;
    xor_ln233_1_fu_54_p1 <= (0=>secondBit, others=>'-');
    xor_ln233_1_fu_54_p2 <= (xor_ln233_1_fu_54_p1 xor p_read1);
    xor_ln233_fu_48_p1 <= (0=>firstBit, others=>'-');
    xor_ln233_fu_48_p2 <= (xor_ln233_fu_48_p1 xor p_read);
end behav;
