-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getFinalHammingDista is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    HammingTable_hammingDistances_finalStates_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    HammingTable_hammingDistances_finalStates_ce0 : OUT STD_LOGIC;
    HammingTable_hammingDistances_finalStates_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    HammingTable_hammingDistances_finalStates_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    HammingTable_hammingDistances_finalStates_ce1 : OUT STD_LOGIC;
    HammingTable_hammingDistances_finalStates_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of getFinalHammingDista is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_iter0_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_iter0_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_iter0_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_iter1_fsm_state5 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";

    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal ap_CS_iter0_fsm_state4 : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state5 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal HammingTable_hamming_27_reg_161 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state2 : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal HammingTable_hamming_27_reg_161_pp0_iter0_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_29_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_29_reg_166_pp0_iter0_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_31_reg_181 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_iter0_fsm_state3 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal HammingTable_hamming_31_reg_181_pp0_iter0_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_33_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_33_reg_186_pp0_iter0_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_35_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal HammingTable_hamming_37_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                HammingTable_hamming_27_reg_161 <= HammingTable_hammingDistances_finalStates_q0;
                HammingTable_hamming_29_reg_166 <= HammingTable_hammingDistances_finalStates_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                HammingTable_hamming_27_reg_161_pp0_iter0_reg <= HammingTable_hamming_27_reg_161;
                HammingTable_hamming_29_reg_166_pp0_iter0_reg <= HammingTable_hamming_29_reg_166;
                HammingTable_hamming_31_reg_181_pp0_iter0_reg <= HammingTable_hamming_31_reg_181;
                HammingTable_hamming_33_reg_186_pp0_iter0_reg <= HammingTable_hamming_33_reg_186;
                HammingTable_hamming_35_reg_201 <= HammingTable_hammingDistances_finalStates_q0;
                HammingTable_hamming_37_reg_206 <= HammingTable_hammingDistances_finalStates_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                HammingTable_hamming_31_reg_181 <= HammingTable_hammingDistances_finalStates_q0;
                HammingTable_hamming_33_reg_186 <= HammingTable_hammingDistances_finalStates_q1;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_start, ap_CS_iter0_fsm, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_CS_iter1_fsm_state5, ap_ce, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                end if;
            when ap_ST_iter0_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state2;
                end if;
            when ap_ST_iter0_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state3;
                end if;
            when ap_ST_iter0_fsm_state4 => 
                if (not(((ap_const_logic_0 = ap_ce) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state5)) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0))))) then
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
                else
                    ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state4;
                end if;
            when others =>  
                ap_NS_iter0_fsm <= "XXXX";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter1_fsm, ap_CS_iter1_fsm_state0, ap_CS_iter0_fsm_state4, ap_CS_iter1_fsm_state5, ap_ce)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state5;
                elsif (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state4) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state5;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_const_logic_0 = ap_ce) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state5)) or ((ap_const_logic_0 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state5;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;

    HammingTable_hammingDistances_finalStates_address0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state4)) then 
            HammingTable_hammingDistances_finalStates_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state3)) then 
            HammingTable_hammingDistances_finalStates_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state2)) then 
            HammingTable_hammingDistances_finalStates_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            HammingTable_hammingDistances_finalStates_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            HammingTable_hammingDistances_finalStates_address0 <= "XXX";
        end if; 
    end process;


    HammingTable_hammingDistances_finalStates_address1_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state4, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_iter0_fsm_state4)) then 
            HammingTable_hammingDistances_finalStates_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state3)) then 
            HammingTable_hammingDistances_finalStates_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_iter0_fsm_state2)) then 
            HammingTable_hammingDistances_finalStates_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            HammingTable_hammingDistances_finalStates_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            HammingTable_hammingDistances_finalStates_address1 <= "XXX";
        end if; 
    end process;


    HammingTable_hammingDistances_finalStates_ce0_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state4, ap_ce, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            HammingTable_hammingDistances_finalStates_ce0 <= ap_const_logic_1;
        else 
            HammingTable_hammingDistances_finalStates_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    HammingTable_hammingDistances_finalStates_ce1_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter0_fsm_state4, ap_ce, ap_CS_iter0_fsm_state2, ap_CS_iter0_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state2)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            HammingTable_hammingDistances_finalStates_ce1 <= ap_const_logic_1;
        else 
            HammingTable_hammingDistances_finalStates_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter0_fsm_state2 <= ap_CS_iter0_fsm(1);
    ap_CS_iter0_fsm_state3 <= ap_CS_iter0_fsm(2);
    ap_CS_iter0_fsm_state4 <= ap_CS_iter0_fsm(3);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state5 <= ap_CS_iter1_fsm(1);

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_iter1_fsm_state5, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter1_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_iter0_fsm_state4, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_iter0_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= HammingTable_hamming_27_reg_161_pp0_iter0_reg;
    ap_return_1 <= HammingTable_hamming_29_reg_166_pp0_iter0_reg;
    ap_return_2 <= HammingTable_hamming_31_reg_181_pp0_iter0_reg;
    ap_return_3 <= HammingTable_hamming_33_reg_186_pp0_iter0_reg;
    ap_return_4 <= HammingTable_hamming_35_reg_201;
    ap_return_5 <= HammingTable_hamming_37_reg_206;
    ap_return_6 <= HammingTable_hammingDistances_finalStates_q0;
    ap_return_7 <= HammingTable_hammingDistances_finalStates_q1;
end behav;
