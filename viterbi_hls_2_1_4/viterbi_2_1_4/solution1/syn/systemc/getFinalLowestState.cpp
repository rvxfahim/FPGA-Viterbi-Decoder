// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getFinalLowestState.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getFinalLowestState::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getFinalLowestState::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage3 = "1000";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage4 = "10000";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage5 = "100000";
const sc_lv<7> getFinalLowestState::ap_ST_fsm_pp0_stage6 = "1000000";
const bool getFinalLowestState::ap_const_boolean_1 = true;
const sc_lv<32> getFinalLowestState::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getFinalLowestState::ap_const_boolean_0 = false;
const sc_lv<32> getFinalLowestState::ap_const_lv32_6 = "110";
const sc_lv<32> getFinalLowestState::ap_const_lv32_1 = "1";
const sc_lv<32> getFinalLowestState::ap_const_lv32_2 = "10";
const sc_lv<32> getFinalLowestState::ap_const_lv32_3 = "11";
const sc_lv<32> getFinalLowestState::ap_const_lv32_4 = "100";
const sc_lv<32> getFinalLowestState::ap_const_lv32_5 = "101";
const sc_lv<64> getFinalLowestState::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> getFinalLowestState::ap_const_lv64_1 = "1";
const sc_lv<64> getFinalLowestState::ap_const_lv64_2 = "10";
const sc_lv<64> getFinalLowestState::ap_const_lv64_3 = "11";
const sc_lv<64> getFinalLowestState::ap_const_lv64_4 = "100";
const sc_lv<64> getFinalLowestState::ap_const_lv64_5 = "101";
const sc_lv<64> getFinalLowestState::ap_const_lv64_6 = "110";
const sc_lv<64> getFinalLowestState::ap_const_lv64_7 = "111";
const sc_lv<2> getFinalLowestState::ap_const_lv2_2 = "10";
const sc_lv<2> getFinalLowestState::ap_const_lv2_3 = "11";
const sc_lv<3> getFinalLowestState::ap_const_lv3_4 = "100";
const sc_lv<3> getFinalLowestState::ap_const_lv3_5 = "101";
const sc_lv<3> getFinalLowestState::ap_const_lv3_6 = "110";
const sc_lv<3> getFinalLowestState::ap_const_lv3_7 = "111";

getFinalLowestState::getFinalLowestState(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_HammingTable_hammingDistances_finalStates_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( zext_ln376_fu_179_p1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( zext_ln376_2_fu_195_p1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln376_4_fu_207_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln376_6_fu_243_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( zext_ln376_7_fu_258_p1 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( zext_ln376_8_fu_291_p1 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_HammingTable_hammingDistances_finalStates_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage6 );

    SC_METHOD(thread_HammingTable_hammingDistances_finalStates_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );

    SC_METHOD(thread_HammingTable_hammingDistances_finalStates_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_pp0_stage5);

    SC_METHOD(thread_ap_block_pp0_stage5_11001);

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);

    SC_METHOD(thread_ap_block_pp0_stage6);

    SC_METHOD(thread_ap_block_pp0_stage6_11001);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter1);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp0_1to1);
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( select_ln376_7_reg_416 );
    sensitive << ( or_ln376_2_fu_304_p2 );
    sensitive << ( select_ln376_9_fu_296_p3 );

    SC_METHOD(thread_grp_fu_173_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_11001 );
    sensitive << ( HammingTable_hammingDistances_finalStates_q0 );
    sensitive << ( HammingTable_hammingDistances_finalStates_q1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_11001 );

    SC_METHOD(thread_or_ln376_1_fu_271_p2);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( icmp_ln376_3_reg_386 );

    SC_METHOD(thread_or_ln376_2_fu_304_p2);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( icmp_ln376_5_reg_426 );

    SC_METHOD(thread_or_ln376_fu_220_p2);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( icmp_ln376_1_reg_346 );

    SC_METHOD(thread_select_ln376_1_fu_200_p3);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( select_ln376_reg_351 );

    SC_METHOD(thread_select_ln376_2_fu_212_p3);
    sensitive << ( grp_fu_173_p2 );

    SC_METHOD(thread_select_ln376_3_fu_225_p3);
    sensitive << ( zext_ln376_1_reg_341 );
    sensitive << ( or_ln376_fu_220_p2 );
    sensitive << ( select_ln376_2_fu_212_p3 );

    SC_METHOD(thread_select_ln376_4_fu_235_p3);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( zext_ln376_3_fu_232_p1 );

    SC_METHOD(thread_select_ln376_5_fu_251_p3);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( select_ln376_4_reg_391 );

    SC_METHOD(thread_select_ln376_6_fu_263_p3);
    sensitive << ( grp_fu_173_p2 );

    SC_METHOD(thread_select_ln376_7_fu_276_p3);
    sensitive << ( or_ln376_1_fu_271_p2 );
    sensitive << ( select_ln376_6_fu_263_p3 );
    sensitive << ( zext_ln376_5_fu_248_p1 );

    SC_METHOD(thread_select_ln376_8_fu_284_p3);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( select_ln376_5_reg_406 );

    SC_METHOD(thread_select_ln376_9_fu_296_p3);
    sensitive << ( grp_fu_173_p2 );

    SC_METHOD(thread_select_ln376_fu_187_p3);
    sensitive << ( grp_fu_173_p2 );
    sensitive << ( zext_ln376_1_fu_184_p1 );

    SC_METHOD(thread_zext_ln376_1_fu_184_p1);
    sensitive << ( icmp_ln376_reg_326 );

    SC_METHOD(thread_zext_ln376_2_fu_195_p1);
    sensitive << ( select_ln376_fu_187_p3 );

    SC_METHOD(thread_zext_ln376_3_fu_232_p1);
    sensitive << ( select_ln376_1_reg_366 );

    SC_METHOD(thread_zext_ln376_4_fu_207_p1);
    sensitive << ( select_ln376_1_fu_200_p3 );

    SC_METHOD(thread_zext_ln376_5_fu_248_p1);
    sensitive << ( select_ln376_3_reg_376 );

    SC_METHOD(thread_zext_ln376_6_fu_243_p1);
    sensitive << ( select_ln376_4_fu_235_p3 );

    SC_METHOD(thread_zext_ln376_7_fu_258_p1);
    sensitive << ( select_ln376_5_fu_251_p3 );

    SC_METHOD(thread_zext_ln376_8_fu_291_p1);
    sensitive << ( select_ln376_8_fu_284_p3 );

    SC_METHOD(thread_zext_ln376_fu_179_p1);
    sensitive << ( grp_fu_173_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_idle_pp0_1to1 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );

    ap_CS_fsm = "0000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getFinalLowestState_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_address0, "(port)HammingTable_hammingDistances_finalStates_address0");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_ce0, "(port)HammingTable_hammingDistances_finalStates_ce0");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_q0, "(port)HammingTable_hammingDistances_finalStates_q0");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_address1, "(port)HammingTable_hammingDistances_finalStates_address1");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_ce1, "(port)HammingTable_hammingDistances_finalStates_ce1");
    sc_trace(mVcdFile, HammingTable_hammingDistances_finalStates_q1, "(port)HammingTable_hammingDistances_finalStates_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage6_iter0, "ap_block_state7_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_11001, "ap_block_pp0_stage6_11001");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter1, "ap_block_state8_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, grp_fu_173_p2, "grp_fu_173_p2");
    sc_trace(mVcdFile, icmp_ln376_reg_326, "icmp_ln376_reg_326");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, zext_ln376_1_fu_184_p1, "zext_ln376_1_fu_184_p1");
    sc_trace(mVcdFile, zext_ln376_1_reg_341, "zext_ln376_1_reg_341");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, icmp_ln376_1_reg_346, "icmp_ln376_1_reg_346");
    sc_trace(mVcdFile, select_ln376_fu_187_p3, "select_ln376_fu_187_p3");
    sc_trace(mVcdFile, select_ln376_reg_351, "select_ln376_reg_351");
    sc_trace(mVcdFile, select_ln376_1_fu_200_p3, "select_ln376_1_fu_200_p3");
    sc_trace(mVcdFile, select_ln376_1_reg_366, "select_ln376_1_reg_366");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage3_iter0, "ap_block_state4_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, select_ln376_3_fu_225_p3, "select_ln376_3_fu_225_p3");
    sc_trace(mVcdFile, select_ln376_3_reg_376, "select_ln376_3_reg_376");
    sc_trace(mVcdFile, icmp_ln376_3_reg_386, "icmp_ln376_3_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage4_iter0, "ap_block_state5_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, select_ln376_4_fu_235_p3, "select_ln376_4_fu_235_p3");
    sc_trace(mVcdFile, select_ln376_4_reg_391, "select_ln376_4_reg_391");
    sc_trace(mVcdFile, select_ln376_5_fu_251_p3, "select_ln376_5_fu_251_p3");
    sc_trace(mVcdFile, select_ln376_5_reg_406, "select_ln376_5_reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage5_iter0, "ap_block_state6_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage5_11001, "ap_block_pp0_stage5_11001");
    sc_trace(mVcdFile, select_ln376_7_fu_276_p3, "select_ln376_7_fu_276_p3");
    sc_trace(mVcdFile, select_ln376_7_reg_416, "select_ln376_7_reg_416");
    sc_trace(mVcdFile, icmp_ln376_5_reg_426, "icmp_ln376_5_reg_426");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, zext_ln376_fu_179_p1, "zext_ln376_fu_179_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, zext_ln376_2_fu_195_p1, "zext_ln376_2_fu_195_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, zext_ln376_4_fu_207_p1, "zext_ln376_4_fu_207_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, zext_ln376_6_fu_243_p1, "zext_ln376_6_fu_243_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, zext_ln376_7_fu_258_p1, "zext_ln376_7_fu_258_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage5, "ap_block_pp0_stage5");
    sc_trace(mVcdFile, zext_ln376_8_fu_291_p1, "zext_ln376_8_fu_291_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage6, "ap_block_pp0_stage6");
    sc_trace(mVcdFile, or_ln376_fu_220_p2, "or_ln376_fu_220_p2");
    sc_trace(mVcdFile, select_ln376_2_fu_212_p3, "select_ln376_2_fu_212_p3");
    sc_trace(mVcdFile, zext_ln376_3_fu_232_p1, "zext_ln376_3_fu_232_p1");
    sc_trace(mVcdFile, or_ln376_1_fu_271_p2, "or_ln376_1_fu_271_p2");
    sc_trace(mVcdFile, select_ln376_6_fu_263_p3, "select_ln376_6_fu_263_p3");
    sc_trace(mVcdFile, zext_ln376_5_fu_248_p1, "zext_ln376_5_fu_248_p1");
    sc_trace(mVcdFile, select_ln376_8_fu_284_p3, "select_ln376_8_fu_284_p3");
    sc_trace(mVcdFile, or_ln376_2_fu_304_p2, "or_ln376_2_fu_304_p2");
    sc_trace(mVcdFile, select_ln376_9_fu_296_p3, "select_ln376_9_fu_296_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0_1to1, "ap_idle_pp0_1to1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

getFinalLowestState::~getFinalLowestState() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getFinalLowestState::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
                    esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        icmp_ln376_1_reg_346 = grp_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        icmp_ln376_3_reg_386 = grp_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        icmp_ln376_5_reg_426 = grp_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        icmp_ln376_reg_326 = grp_fu_173_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        select_ln376_1_reg_366 = select_ln376_1_fu_200_p3.read();
        select_ln376_3_reg_376 = select_ln376_3_fu_225_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        select_ln376_4_reg_391 = select_ln376_4_fu_235_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0))) {
        select_ln376_5_reg_406 = select_ln376_5_fu_251_p3.read();
        select_ln376_7_reg_416 = select_ln376_7_fu_276_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        select_ln376_reg_351 = select_ln376_fu_187_p3.read();
        zext_ln376_1_reg_341 = zext_ln376_1_fu_184_p1.read();
    }
}

void getFinalLowestState::thread_HammingTable_hammingDistances_finalStates_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_8_fu_291_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_7_fu_258_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_6_fu_243_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_4_fu_207_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_2_fu_195_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (zext_ln376_fu_179_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address0 =  (sc_lv<3>) (ap_const_lv64_0);
        } else {
            HammingTable_hammingDistances_finalStates_address0 = "XXX";
        }
    } else {
        HammingTable_hammingDistances_finalStates_address0 = "XXX";
    }
}

void getFinalLowestState::thread_HammingTable_hammingDistances_finalStates_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage6.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_7);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage5.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_6);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_5);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_4);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_3);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            HammingTable_hammingDistances_finalStates_address1 =  (sc_lv<3>) (ap_const_lv64_1);
        } else {
            HammingTable_hammingDistances_finalStates_address1 = "XXX";
        }
    } else {
        HammingTable_hammingDistances_finalStates_address1 = "XXX";
    }
}

void getFinalLowestState::thread_HammingTable_hammingDistances_finalStates_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)))) {
        HammingTable_hammingDistances_finalStates_ce0 = ap_const_logic_1;
    } else {
        HammingTable_hammingDistances_finalStates_ce0 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_HammingTable_hammingDistances_finalStates_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_11001.read(), ap_const_boolean_0)))) {
        HammingTable_hammingDistances_finalStates_ce1 = ap_const_logic_1;
    } else {
        HammingTable_hammingDistances_finalStates_ce1 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[1];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[3];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[4];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[5];
}

void getFinalLowestState::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[6];
}

void getFinalLowestState::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void getFinalLowestState::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void getFinalLowestState::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage5() {
    ap_block_pp0_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage5_11001() {
    ap_block_pp0_stage5_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage6() {
    ap_block_pp0_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage6_11001() {
    ap_block_pp0_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void getFinalLowestState::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state4_pp0_stage3_iter0() {
    ap_block_state4_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state5_pp0_stage4_iter0() {
    ap_block_state5_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state6_pp0_stage5_iter0() {
    ap_block_state6_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state7_pp0_stage6_iter0() {
    ap_block_state7_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_block_state8_pp0_stage0_iter1() {
    ap_block_state8_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getFinalLowestState::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getFinalLowestState::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void getFinalLowestState::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_idle_pp0_1to1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read())) {
        ap_idle_pp0_1to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to1 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage6_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getFinalLowestState::thread_ap_return() {
    ap_return = (!or_ln376_2_fu_304_p2.read()[0].is_01())? sc_lv<3>(): ((or_ln376_2_fu_304_p2.read()[0].to_bool())? select_ln376_9_fu_296_p3.read(): select_ln376_7_reg_416.read());
}

void getFinalLowestState::thread_grp_fu_173_p2() {
    grp_fu_173_p2 = (!HammingTable_hammingDistances_finalStates_q1.read().is_01() || !HammingTable_hammingDistances_finalStates_q0.read().is_01())? sc_lv<1>(): (sc_bigint<8>(HammingTable_hammingDistances_finalStates_q1.read()) < sc_bigint<8>(HammingTable_hammingDistances_finalStates_q0.read()));
}

void getFinalLowestState::thread_or_ln376_1_fu_271_p2() {
    or_ln376_1_fu_271_p2 = (grp_fu_173_p2.read() | icmp_ln376_3_reg_386.read());
}

void getFinalLowestState::thread_or_ln376_2_fu_304_p2() {
    or_ln376_2_fu_304_p2 = (grp_fu_173_p2.read() | icmp_ln376_5_reg_426.read());
}

void getFinalLowestState::thread_or_ln376_fu_220_p2() {
    or_ln376_fu_220_p2 = (grp_fu_173_p2.read() | icmp_ln376_1_reg_346.read());
}

void getFinalLowestState::thread_select_ln376_1_fu_200_p3() {
    select_ln376_1_fu_200_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<2>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv2_3: select_ln376_reg_351.read());
}

void getFinalLowestState::thread_select_ln376_2_fu_212_p3() {
    select_ln376_2_fu_212_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<2>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_2);
}

void getFinalLowestState::thread_select_ln376_3_fu_225_p3() {
    select_ln376_3_fu_225_p3 = (!or_ln376_fu_220_p2.read()[0].is_01())? sc_lv<2>(): ((or_ln376_fu_220_p2.read()[0].to_bool())? select_ln376_2_fu_212_p3.read(): zext_ln376_1_reg_341.read());
}

void getFinalLowestState::thread_select_ln376_4_fu_235_p3() {
    select_ln376_4_fu_235_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<3>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv3_4: zext_ln376_3_fu_232_p1.read());
}

void getFinalLowestState::thread_select_ln376_5_fu_251_p3() {
    select_ln376_5_fu_251_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<3>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv3_5: select_ln376_4_reg_391.read());
}

void getFinalLowestState::thread_select_ln376_6_fu_263_p3() {
    select_ln376_6_fu_263_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<3>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv3_5: ap_const_lv3_4);
}

void getFinalLowestState::thread_select_ln376_7_fu_276_p3() {
    select_ln376_7_fu_276_p3 = (!or_ln376_1_fu_271_p2.read()[0].is_01())? sc_lv<3>(): ((or_ln376_1_fu_271_p2.read()[0].to_bool())? select_ln376_6_fu_263_p3.read(): zext_ln376_5_fu_248_p1.read());
}

void getFinalLowestState::thread_select_ln376_8_fu_284_p3() {
    select_ln376_8_fu_284_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<3>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv3_6: select_ln376_5_reg_406.read());
}

void getFinalLowestState::thread_select_ln376_9_fu_296_p3() {
    select_ln376_9_fu_296_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<3>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv3_7: ap_const_lv3_6);
}

void getFinalLowestState::thread_select_ln376_fu_187_p3() {
    select_ln376_fu_187_p3 = (!grp_fu_173_p2.read()[0].is_01())? sc_lv<2>(): ((grp_fu_173_p2.read()[0].to_bool())? ap_const_lv2_2: zext_ln376_1_fu_184_p1.read());
}

void getFinalLowestState::thread_zext_ln376_1_fu_184_p1() {
    zext_ln376_1_fu_184_p1 = esl_zext<2,1>(icmp_ln376_reg_326.read());
}

void getFinalLowestState::thread_zext_ln376_2_fu_195_p1() {
    zext_ln376_2_fu_195_p1 = esl_zext<64,2>(select_ln376_fu_187_p3.read());
}

void getFinalLowestState::thread_zext_ln376_3_fu_232_p1() {
    zext_ln376_3_fu_232_p1 = esl_zext<3,2>(select_ln376_1_reg_366.read());
}

void getFinalLowestState::thread_zext_ln376_4_fu_207_p1() {
    zext_ln376_4_fu_207_p1 = esl_zext<64,2>(select_ln376_1_fu_200_p3.read());
}

void getFinalLowestState::thread_zext_ln376_5_fu_248_p1() {
    zext_ln376_5_fu_248_p1 = esl_zext<3,2>(select_ln376_3_reg_376.read());
}

void getFinalLowestState::thread_zext_ln376_6_fu_243_p1() {
    zext_ln376_6_fu_243_p1 = esl_zext<64,3>(select_ln376_4_fu_235_p3.read());
}

void getFinalLowestState::thread_zext_ln376_7_fu_258_p1() {
    zext_ln376_7_fu_258_p1 = esl_zext<64,3>(select_ln376_5_fu_251_p3.read());
}

void getFinalLowestState::thread_zext_ln376_8_fu_291_p1() {
    zext_ln376_8_fu_291_p1 = esl_zext<64,3>(select_ln376_8_fu_284_p3.read());
}

void getFinalLowestState::thread_zext_ln376_fu_179_p1() {
    zext_ln376_fu_179_p1 = esl_zext<64,1>(grp_fu_173_p2.read());
}

void getFinalLowestState::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

