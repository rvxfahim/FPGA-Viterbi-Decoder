// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getFinalLowestState_HH_
#define _getFinalLowestState_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getFinalLowestState : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > HammingTable_hammingDistances_finalStates_address0;
    sc_out< sc_logic > HammingTable_hammingDistances_finalStates_ce0;
    sc_in< sc_lv<8> > HammingTable_hammingDistances_finalStates_q0;
    sc_out< sc_lv<3> > HammingTable_hammingDistances_finalStates_address1;
    sc_out< sc_logic > HammingTable_hammingDistances_finalStates_ce1;
    sc_in< sc_lv<8> > HammingTable_hammingDistances_finalStates_q1;
    sc_out< sc_lv<3> > ap_return;


    // Module declarations
    getFinalLowestState(sc_module_name name);
    SC_HAS_PROCESS(getFinalLowestState);

    ~getFinalLowestState();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_state7_pp0_stage6_iter0;
    sc_signal< bool > ap_block_pp0_stage6_11001;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > grp_fu_173_p2;
    sc_signal< sc_lv<1> > icmp_ln376_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<2> > zext_ln376_1_fu_184_p1;
    sc_signal< sc_lv<2> > zext_ln376_1_reg_341;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<1> > icmp_ln376_1_reg_346;
    sc_signal< sc_lv<2> > select_ln376_fu_187_p3;
    sc_signal< sc_lv<2> > select_ln376_reg_351;
    sc_signal< sc_lv<2> > select_ln376_1_fu_200_p3;
    sc_signal< sc_lv<2> > select_ln376_1_reg_366;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<2> > select_ln376_3_fu_225_p3;
    sc_signal< sc_lv<2> > select_ln376_3_reg_376;
    sc_signal< sc_lv<1> > icmp_ln376_3_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state5_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_lv<3> > select_ln376_4_fu_235_p3;
    sc_signal< sc_lv<3> > select_ln376_4_reg_391;
    sc_signal< sc_lv<3> > select_ln376_5_fu_251_p3;
    sc_signal< sc_lv<3> > select_ln376_5_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_state6_pp0_stage5_iter0;
    sc_signal< bool > ap_block_pp0_stage5_11001;
    sc_signal< sc_lv<3> > select_ln376_7_fu_276_p3;
    sc_signal< sc_lv<3> > select_ln376_7_reg_416;
    sc_signal< sc_lv<1> > icmp_ln376_5_reg_426;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage6_subdone;
    sc_signal< sc_lv<64> > zext_ln376_fu_179_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > zext_ln376_2_fu_195_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > zext_ln376_4_fu_207_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<64> > zext_ln376_6_fu_243_p1;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_lv<64> > zext_ln376_7_fu_258_p1;
    sc_signal< bool > ap_block_pp0_stage5;
    sc_signal< sc_lv<64> > zext_ln376_8_fu_291_p1;
    sc_signal< bool > ap_block_pp0_stage6;
    sc_signal< sc_lv<1> > or_ln376_fu_220_p2;
    sc_signal< sc_lv<2> > select_ln376_2_fu_212_p3;
    sc_signal< sc_lv<3> > zext_ln376_3_fu_232_p1;
    sc_signal< sc_lv<1> > or_ln376_1_fu_271_p2;
    sc_signal< sc_lv<3> > select_ln376_6_fu_263_p3;
    sc_signal< sc_lv<3> > zext_ln376_5_fu_248_p1;
    sc_signal< sc_lv<3> > select_ln376_8_fu_284_p3;
    sc_signal< sc_lv<1> > or_ln376_2_fu_304_p2;
    sc_signal< sc_lv<3> > select_ln376_9_fu_296_p3;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage5_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_pp0_stage4;
    static const sc_lv<7> ap_ST_fsm_pp0_stage5;
    static const sc_lv<7> ap_ST_fsm_pp0_stage6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_HammingTable_hammingDistances_finalStates_address0();
    void thread_HammingTable_hammingDistances_finalStates_address1();
    void thread_HammingTable_hammingDistances_finalStates_ce0();
    void thread_HammingTable_hammingDistances_finalStates_ce1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_pp0_stage5();
    void thread_ap_block_pp0_stage5_11001();
    void thread_ap_block_pp0_stage5_subdone();
    void thread_ap_block_pp0_stage6();
    void thread_ap_block_pp0_stage6_11001();
    void thread_ap_block_pp0_stage6_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage4_iter0();
    void thread_ap_block_state6_pp0_stage5_iter0();
    void thread_ap_block_state7_pp0_stage6_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_grp_fu_173_p2();
    void thread_or_ln376_1_fu_271_p2();
    void thread_or_ln376_2_fu_304_p2();
    void thread_or_ln376_fu_220_p2();
    void thread_select_ln376_1_fu_200_p3();
    void thread_select_ln376_2_fu_212_p3();
    void thread_select_ln376_3_fu_225_p3();
    void thread_select_ln376_4_fu_235_p3();
    void thread_select_ln376_5_fu_251_p3();
    void thread_select_ln376_6_fu_263_p3();
    void thread_select_ln376_7_fu_276_p3();
    void thread_select_ln376_8_fu_284_p3();
    void thread_select_ln376_9_fu_296_p3();
    void thread_select_ln376_fu_187_p3();
    void thread_zext_ln376_1_fu_184_p1();
    void thread_zext_ln376_2_fu_195_p1();
    void thread_zext_ln376_3_fu_232_p1();
    void thread_zext_ln376_4_fu_207_p1();
    void thread_zext_ln376_5_fu_248_p1();
    void thread_zext_ln376_6_fu_243_p1();
    void thread_zext_ln376_7_fu_258_p1();
    void thread_zext_ln376_8_fu_291_p1();
    void thread_zext_ln376_fu_179_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
