// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "calculateDistanceFor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic calculateDistanceFor::ap_const_logic_1 = sc_dt::Log_1;
const bool calculateDistanceFor::ap_const_boolean_1 = true;
const sc_lv<8> calculateDistanceFor::ap_const_lv8_2 = "10";
const sc_lv<8> calculateDistanceFor::ap_const_lv8_1 = "1";
const sc_logic calculateDistanceFor::ap_const_logic_0 = sc_dt::Log_0;

calculateDistanceFor::calculateDistanceFor(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln233_fu_74_p2);
    sensitive << ( previousDistance );
    sensitive << ( select_ln233_fu_66_p3 );

    SC_METHOD(thread_and_ln233_fu_60_p2);
    sensitive << ( xor_ln233_fu_48_p2 );
    sensitive << ( xor_ln233_1_fu_54_p2 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( previousDistance );
    sensitive << ( or_ln233_fu_80_p2 );
    sensitive << ( add_ln233_fu_74_p2 );

    SC_METHOD(thread_or_ln233_fu_80_p2);
    sensitive << ( xor_ln233_fu_48_p2 );
    sensitive << ( xor_ln233_1_fu_54_p2 );

    SC_METHOD(thread_select_ln233_fu_66_p3);
    sensitive << ( and_ln233_fu_60_p2 );

    SC_METHOD(thread_xor_ln233_1_fu_54_p1);
    sensitive << ( secondBit );

    SC_METHOD(thread_xor_ln233_1_fu_54_p2);
    sensitive << ( p_read1 );
    sensitive << ( xor_ln233_1_fu_54_p1 );

    SC_METHOD(thread_xor_ln233_fu_48_p1);
    sensitive << ( firstBit );

    SC_METHOD(thread_xor_ln233_fu_48_p2);
    sensitive << ( p_read );
    sensitive << ( xor_ln233_fu_48_p1 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "calculateDistanceFor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, firstBit, "(port)firstBit");
    sc_trace(mVcdFile, secondBit, "(port)secondBit");
    sc_trace(mVcdFile, previousDistance, "(port)previousDistance");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, xor_ln233_fu_48_p1, "xor_ln233_fu_48_p1");
    sc_trace(mVcdFile, xor_ln233_1_fu_54_p1, "xor_ln233_1_fu_54_p1");
    sc_trace(mVcdFile, xor_ln233_fu_48_p2, "xor_ln233_fu_48_p2");
    sc_trace(mVcdFile, xor_ln233_1_fu_54_p2, "xor_ln233_1_fu_54_p2");
    sc_trace(mVcdFile, and_ln233_fu_60_p2, "and_ln233_fu_60_p2");
    sc_trace(mVcdFile, select_ln233_fu_66_p3, "select_ln233_fu_66_p3");
    sc_trace(mVcdFile, or_ln233_fu_80_p2, "or_ln233_fu_80_p2");
    sc_trace(mVcdFile, add_ln233_fu_74_p2, "add_ln233_fu_74_p2");
#endif

    }
}

calculateDistanceFor::~calculateDistanceFor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void calculateDistanceFor::thread_add_ln233_fu_74_p2() {
    add_ln233_fu_74_p2 = (!previousDistance.read().is_01() || !select_ln233_fu_66_p3.read().is_01())? sc_lv<8>(): (sc_biguint<8>(previousDistance.read()) + sc_biguint<8>(select_ln233_fu_66_p3.read()));
}

void calculateDistanceFor::thread_and_ln233_fu_60_p2() {
    and_ln233_fu_60_p2 = (xor_ln233_fu_48_p2.read() & xor_ln233_1_fu_54_p2.read());
}

void calculateDistanceFor::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void calculateDistanceFor::thread_ap_return() {
    ap_return = (!or_ln233_fu_80_p2.read()[0].is_01())? sc_lv<8>(): ((or_ln233_fu_80_p2.read()[0].to_bool())? add_ln233_fu_74_p2.read(): previousDistance.read());
}

void calculateDistanceFor::thread_or_ln233_fu_80_p2() {
    or_ln233_fu_80_p2 = (xor_ln233_1_fu_54_p2.read() | xor_ln233_fu_48_p2.read());
}

void calculateDistanceFor::thread_select_ln233_fu_66_p3() {
    select_ln233_fu_66_p3 = (!and_ln233_fu_60_p2.read()[0].is_01())? sc_lv<8>(): ((and_ln233_fu_60_p2.read()[0].to_bool())? ap_const_lv8_2: ap_const_lv8_1);
}

void calculateDistanceFor::thread_xor_ln233_1_fu_54_p1() {
    xor_ln233_1_fu_54_p1 =  (sc_lv<1>) (secondBit.read());
}

void calculateDistanceFor::thread_xor_ln233_1_fu_54_p2() {
    xor_ln233_1_fu_54_p2 = (p_read1.read() ^ xor_ln233_1_fu_54_p1.read());
}

void calculateDistanceFor::thread_xor_ln233_fu_48_p1() {
    xor_ln233_fu_48_p1 =  (sc_lv<1>) (firstBit.read());
}

void calculateDistanceFor::thread_xor_ln233_fu_48_p2() {
    xor_ln233_fu_48_p2 = (p_read.read() ^ xor_ln233_fu_48_p1.read());
}

}

