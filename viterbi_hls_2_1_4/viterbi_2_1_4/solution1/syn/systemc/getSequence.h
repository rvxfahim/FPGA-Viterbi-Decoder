// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getSequence_HH_
#define _getSequence_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getSequence : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<4> > stateA;
    sc_in< sc_lv<4> > stateB;
    sc_out< sc_lv<1> > ap_return;


    // Module declarations
    getSequence(sc_module_name name);
    SC_HAS_PROCESS(getSequence);

    ~getSequence();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > bitSequence_decoded;
    sc_signal< sc_lv<1> > icmp_ln429_fu_80_p2;
    sc_signal< sc_lv<1> > and_ln434_fu_98_p2;
    sc_signal< sc_lv<1> > and_ln439_fu_116_p2;
    sc_signal< sc_lv<1> > and_ln444_fu_128_p2;
    sc_signal< sc_lv<1> > and_ln449_fu_146_p2;
    sc_signal< sc_lv<1> > and_ln454_fu_158_p2;
    sc_signal< sc_lv<1> > and_ln459_fu_176_p2;
    sc_signal< sc_lv<1> > and_ln464_fu_188_p2;
    sc_signal< sc_lv<1> > and_ln469_fu_206_p2;
    sc_signal< sc_lv<1> > and_ln474_fu_212_p2;
    sc_signal< sc_lv<1> > and_ln479_fu_224_p2;
    sc_signal< sc_lv<1> > and_ln484_fu_230_p2;
    sc_signal< sc_lv<1> > and_ln489_fu_242_p2;
    sc_signal< sc_lv<1> > and_ln494_fu_248_p2;
    sc_signal< sc_lv<1> > and_ln499_fu_260_p2;
    sc_signal< sc_lv<1> > and_ln504_fu_266_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<3> > trunc_ln429_fu_66_p1;
    sc_signal< sc_lv<3> > trunc_ln429_1_fu_70_p1;
    sc_signal< sc_lv<3> > or_ln429_fu_74_p2;
    sc_signal< sc_lv<1> > icmp_ln434_fu_86_p2;
    sc_signal< sc_lv<1> > icmp_ln434_1_fu_92_p2;
    sc_signal< sc_lv<1> > icmp_ln439_fu_104_p2;
    sc_signal< sc_lv<1> > icmp_ln439_1_fu_110_p2;
    sc_signal< sc_lv<1> > icmp_ln444_fu_122_p2;
    sc_signal< sc_lv<1> > icmp_ln449_fu_134_p2;
    sc_signal< sc_lv<1> > icmp_ln449_1_fu_140_p2;
    sc_signal< sc_lv<1> > icmp_ln454_fu_152_p2;
    sc_signal< sc_lv<1> > icmp_ln459_fu_164_p2;
    sc_signal< sc_lv<1> > icmp_ln459_1_fu_170_p2;
    sc_signal< sc_lv<1> > icmp_ln464_fu_182_p2;
    sc_signal< sc_lv<1> > icmp_ln469_fu_194_p2;
    sc_signal< sc_lv<1> > icmp_ln469_1_fu_200_p2;
    sc_signal< sc_lv<1> > icmp_ln479_fu_218_p2;
    sc_signal< sc_lv<1> > icmp_ln489_fu_236_p2;
    sc_signal< sc_lv<1> > icmp_ln499_fu_254_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln434_fu_98_p2();
    void thread_and_ln439_fu_116_p2();
    void thread_and_ln444_fu_128_p2();
    void thread_and_ln449_fu_146_p2();
    void thread_and_ln454_fu_158_p2();
    void thread_and_ln459_fu_176_p2();
    void thread_and_ln464_fu_188_p2();
    void thread_and_ln469_fu_206_p2();
    void thread_and_ln474_fu_212_p2();
    void thread_and_ln479_fu_224_p2();
    void thread_and_ln484_fu_230_p2();
    void thread_and_ln489_fu_242_p2();
    void thread_and_ln494_fu_248_p2();
    void thread_and_ln499_fu_260_p2();
    void thread_and_ln504_fu_266_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_icmp_ln429_fu_80_p2();
    void thread_icmp_ln434_1_fu_92_p2();
    void thread_icmp_ln434_fu_86_p2();
    void thread_icmp_ln439_1_fu_110_p2();
    void thread_icmp_ln439_fu_104_p2();
    void thread_icmp_ln444_fu_122_p2();
    void thread_icmp_ln449_1_fu_140_p2();
    void thread_icmp_ln449_fu_134_p2();
    void thread_icmp_ln454_fu_152_p2();
    void thread_icmp_ln459_1_fu_170_p2();
    void thread_icmp_ln459_fu_164_p2();
    void thread_icmp_ln464_fu_182_p2();
    void thread_icmp_ln469_1_fu_200_p2();
    void thread_icmp_ln469_fu_194_p2();
    void thread_icmp_ln479_fu_218_p2();
    void thread_icmp_ln489_fu_236_p2();
    void thread_icmp_ln499_fu_254_p2();
    void thread_or_ln429_fu_74_p2();
    void thread_trunc_ln429_1_fu_70_p1();
    void thread_trunc_ln429_fu_66_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
