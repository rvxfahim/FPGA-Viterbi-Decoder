// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getReturnPath_HH_
#define _getReturnPath_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getReturnPath : public sc_module {
    // Port declarations 11
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read1;
    sc_in< sc_lv<8> > p_read2;
    sc_in< sc_lv<8> > p_read3;
    sc_in< sc_lv<8> > p_read4;
    sc_in< sc_lv<8> > p_read5;
    sc_in< sc_lv<8> > p_read6;
    sc_in< sc_lv<8> > p_read7;
    sc_in< sc_lv<3> > state;
    sc_out< sc_lv<3> > ap_return;


    // Module declarations
    getReturnPath(sc_module_name name);
    SC_HAS_PROCESS(getReturnPath);

    ~getReturnPath();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > icmp_ln296_fu_110_p2;
    sc_signal< sc_lv<1> > icmp_ln304_fu_120_p2;
    sc_signal< sc_lv<1> > icmp_ln312_fu_134_p2;
    sc_signal< sc_lv<1> > icmp_ln321_fu_148_p2;
    sc_signal< sc_lv<1> > icmp_ln330_fu_162_p2;
    sc_signal< sc_lv<1> > icmp_ln339_fu_172_p2;
    sc_signal< sc_lv<1> > icmp_ln348_fu_186_p2;
    sc_signal< sc_lv<1> > icmp_ln357_fu_200_p2;
    sc_signal< sc_lv<1> > icmp_ln294_fu_214_p2;
    sc_signal< sc_lv<2> > select_ln357_fu_206_p3;
    sc_signal< sc_lv<2> > select_ln294_fu_220_p3;
    sc_signal< sc_lv<1> > icmp_ln294_1_fu_232_p2;
    sc_signal< sc_lv<3> > select_ln348_fu_192_p3;
    sc_signal< sc_lv<3> > sext_ln294_fu_228_p1;
    sc_signal< sc_lv<1> > icmp_ln294_2_fu_246_p2;
    sc_signal< sc_lv<3> > select_ln339_fu_178_p3;
    sc_signal< sc_lv<3> > select_ln294_1_fu_238_p3;
    sc_signal< sc_lv<1> > icmp_ln294_3_fu_260_p2;
    sc_signal< sc_lv<3> > zext_ln339_fu_168_p1;
    sc_signal< sc_lv<3> > select_ln294_2_fu_252_p3;
    sc_signal< sc_lv<1> > icmp_ln294_4_fu_274_p2;
    sc_signal< sc_lv<3> > select_ln321_fu_154_p3;
    sc_signal< sc_lv<3> > select_ln294_3_fu_266_p3;
    sc_signal< sc_lv<1> > icmp_ln294_5_fu_288_p2;
    sc_signal< sc_lv<3> > select_ln312_fu_140_p3;
    sc_signal< sc_lv<3> > select_ln294_4_fu_280_p3;
    sc_signal< sc_lv<1> > icmp_ln294_6_fu_302_p2;
    sc_signal< sc_lv<3> > select_ln304_fu_126_p3;
    sc_signal< sc_lv<3> > select_ln294_5_fu_294_p3;
    sc_signal< sc_lv<1> > icmp_ln294_7_fu_316_p2;
    sc_signal< sc_lv<3> > zext_ln304_fu_116_p1;
    sc_signal< sc_lv<3> > select_ln294_6_fu_308_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln294_1_fu_232_p2();
    void thread_icmp_ln294_2_fu_246_p2();
    void thread_icmp_ln294_3_fu_260_p2();
    void thread_icmp_ln294_4_fu_274_p2();
    void thread_icmp_ln294_5_fu_288_p2();
    void thread_icmp_ln294_6_fu_302_p2();
    void thread_icmp_ln294_7_fu_316_p2();
    void thread_icmp_ln294_fu_214_p2();
    void thread_icmp_ln296_fu_110_p2();
    void thread_icmp_ln304_fu_120_p2();
    void thread_icmp_ln312_fu_134_p2();
    void thread_icmp_ln321_fu_148_p2();
    void thread_icmp_ln330_fu_162_p2();
    void thread_icmp_ln339_fu_172_p2();
    void thread_icmp_ln348_fu_186_p2();
    void thread_icmp_ln357_fu_200_p2();
    void thread_select_ln294_1_fu_238_p3();
    void thread_select_ln294_2_fu_252_p3();
    void thread_select_ln294_3_fu_266_p3();
    void thread_select_ln294_4_fu_280_p3();
    void thread_select_ln294_5_fu_294_p3();
    void thread_select_ln294_6_fu_308_p3();
    void thread_select_ln294_fu_220_p3();
    void thread_select_ln304_fu_126_p3();
    void thread_select_ln312_fu_140_p3();
    void thread_select_ln321_fu_154_p3();
    void thread_select_ln339_fu_178_p3();
    void thread_select_ln348_fu_192_p3();
    void thread_select_ln357_fu_206_p3();
    void thread_sext_ln294_fu_228_p1();
    void thread_zext_ln304_fu_116_p1();
    void thread_zext_ln339_fu_168_p1();
};

}

using namespace ap_rtl;

#endif
