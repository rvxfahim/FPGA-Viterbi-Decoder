// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calculateDistanceFor (
        ap_ready,
        p_read,
        p_read1,
        firstBit,
        secondBit,
        previousDistance,
        ap_return
);


output   ap_ready;
input  [0:0] p_read;
input  [0:0] p_read1;
input   firstBit;
input   secondBit;
input  [7:0] previousDistance;
output  [7:0] ap_return;

wire   [0:0] xor_ln233_fu_48_p1;
wire   [0:0] xor_ln233_1_fu_54_p1;
wire   [0:0] xor_ln233_fu_48_p2;
wire   [0:0] xor_ln233_1_fu_54_p2;
wire   [0:0] and_ln233_fu_60_p2;
wire   [7:0] select_ln233_fu_66_p3;
wire   [0:0] or_ln233_fu_80_p2;
wire   [7:0] add_ln233_fu_74_p2;

assign add_ln233_fu_74_p2 = (previousDistance + select_ln233_fu_66_p3);

assign and_ln233_fu_60_p2 = (xor_ln233_fu_48_p2 & xor_ln233_1_fu_54_p2);

assign ap_ready = 1'b1;

assign ap_return = ((or_ln233_fu_80_p2[0:0] === 1'b1) ? add_ln233_fu_74_p2 : previousDistance);

assign or_ln233_fu_80_p2 = (xor_ln233_fu_48_p2 | xor_ln233_1_fu_54_p2);

assign select_ln233_fu_66_p3 = ((and_ln233_fu_60_p2[0:0] === 1'b1) ? 8'd2 : 8'd1);

assign xor_ln233_1_fu_54_p1 = secondBit;

assign xor_ln233_1_fu_54_p2 = (xor_ln233_1_fu_54_p1 ^ p_read1);

assign xor_ln233_fu_48_p1 = firstBit;

assign xor_ln233_fu_48_p2 = (xor_ln233_fu_48_p1 ^ p_read);

endmodule //calculateDistanceFor
