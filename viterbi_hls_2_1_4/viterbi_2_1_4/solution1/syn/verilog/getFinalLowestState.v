// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getFinalLowestState (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        HammingTable_hammingDistances_finalStates_address0,
        HammingTable_hammingDistances_finalStates_ce0,
        HammingTable_hammingDistances_finalStates_q0,
        HammingTable_hammingDistances_finalStates_address1,
        HammingTable_hammingDistances_finalStates_ce1,
        HammingTable_hammingDistances_finalStates_q1,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage1 = 7'd2;
parameter    ap_ST_fsm_pp0_stage2 = 7'd4;
parameter    ap_ST_fsm_pp0_stage3 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] HammingTable_hammingDistances_finalStates_address0;
output   HammingTable_hammingDistances_finalStates_ce0;
input  [7:0] HammingTable_hammingDistances_finalStates_q0;
output  [2:0] HammingTable_hammingDistances_finalStates_address1;
output   HammingTable_hammingDistances_finalStates_ce1;
input  [7:0] HammingTable_hammingDistances_finalStates_q1;
output  [2:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] HammingTable_hammingDistances_finalStates_address0;
reg HammingTable_hammingDistances_finalStates_ce0;
reg[2:0] HammingTable_hammingDistances_finalStates_address1;
reg HammingTable_hammingDistances_finalStates_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] grp_fu_173_p2;
reg   [0:0] icmp_ln376_reg_326;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [1:0] zext_ln376_1_fu_184_p1;
reg   [1:0] zext_ln376_1_reg_341;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln376_1_reg_346;
wire   [1:0] select_ln376_fu_187_p3;
reg   [1:0] select_ln376_reg_351;
wire   [1:0] select_ln376_1_fu_200_p3;
reg   [1:0] select_ln376_1_reg_366;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [1:0] select_ln376_3_fu_225_p3;
reg   [1:0] select_ln376_3_reg_376;
reg   [0:0] icmp_ln376_3_reg_386;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [2:0] select_ln376_4_fu_235_p3;
reg   [2:0] select_ln376_4_reg_391;
wire   [2:0] select_ln376_5_fu_251_p3;
reg   [2:0] select_ln376_5_reg_406;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [2:0] select_ln376_7_fu_276_p3;
reg   [2:0] select_ln376_7_reg_416;
reg   [0:0] icmp_ln376_5_reg_426;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage6_subdone;
wire   [63:0] zext_ln376_fu_179_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln376_2_fu_195_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln376_4_fu_207_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln376_6_fu_243_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln376_7_fu_258_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln376_8_fu_291_p1;
wire    ap_block_pp0_stage6;
wire   [0:0] or_ln376_fu_220_p2;
wire   [1:0] select_ln376_2_fu_212_p3;
wire   [2:0] zext_ln376_3_fu_232_p1;
wire   [0:0] or_ln376_1_fu_271_p2;
wire   [2:0] select_ln376_6_fu_263_p3;
wire   [2:0] zext_ln376_5_fu_248_p1;
wire   [2:0] select_ln376_8_fu_284_p3;
wire   [0:0] or_ln376_2_fu_304_p2;
wire   [2:0] select_ln376_9_fu_296_p3;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        icmp_ln376_1_reg_346 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        icmp_ln376_3_reg_386 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        icmp_ln376_5_reg_426 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        icmp_ln376_reg_326 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        select_ln376_1_reg_366 <= select_ln376_1_fu_200_p3;
        select_ln376_3_reg_376 <= select_ln376_3_fu_225_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln376_4_reg_391 <= select_ln376_4_fu_235_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        select_ln376_5_reg_406 <= select_ln376_5_fu_251_p3;
        select_ln376_7_reg_416 <= select_ln376_7_fu_276_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln376_reg_351 <= select_ln376_fu_187_p3;
        zext_ln376_1_reg_341[0] <= zext_ln376_1_fu_184_p1[0];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_8_fu_291_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_7_fu_258_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_6_fu_243_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_4_fu_207_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_2_fu_195_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            HammingTable_hammingDistances_finalStates_address0 = zext_ln376_fu_179_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            HammingTable_hammingDistances_finalStates_address0 = 64'd0;
        end else begin
            HammingTable_hammingDistances_finalStates_address0 = 'bx;
        end
    end else begin
        HammingTable_hammingDistances_finalStates_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            HammingTable_hammingDistances_finalStates_address1 = 64'd1;
        end else begin
            HammingTable_hammingDistances_finalStates_address1 = 'bx;
        end
    end else begin
        HammingTable_hammingDistances_finalStates_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        HammingTable_hammingDistances_finalStates_ce0 = 1'b1;
    end else begin
        HammingTable_hammingDistances_finalStates_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        HammingTable_hammingDistances_finalStates_ce1 = 1'b1;
    end else begin
        HammingTable_hammingDistances_finalStates_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((or_ln376_2_fu_304_p2[0:0] === 1'b1) ? select_ln376_9_fu_296_p3 : select_ln376_7_reg_416);

assign grp_fu_173_p2 = (($signed(HammingTable_hammingDistances_finalStates_q1) < $signed(HammingTable_hammingDistances_finalStates_q0)) ? 1'b1 : 1'b0);

assign or_ln376_1_fu_271_p2 = (icmp_ln376_3_reg_386 | grp_fu_173_p2);

assign or_ln376_2_fu_304_p2 = (icmp_ln376_5_reg_426 | grp_fu_173_p2);

assign or_ln376_fu_220_p2 = (icmp_ln376_1_reg_346 | grp_fu_173_p2);

assign select_ln376_1_fu_200_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 2'd3 : select_ln376_reg_351);

assign select_ln376_2_fu_212_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln376_3_fu_225_p3 = ((or_ln376_fu_220_p2[0:0] === 1'b1) ? select_ln376_2_fu_212_p3 : zext_ln376_1_reg_341);

assign select_ln376_4_fu_235_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 3'd4 : zext_ln376_3_fu_232_p1);

assign select_ln376_5_fu_251_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 3'd5 : select_ln376_4_reg_391);

assign select_ln376_6_fu_263_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln376_7_fu_276_p3 = ((or_ln376_1_fu_271_p2[0:0] === 1'b1) ? select_ln376_6_fu_263_p3 : zext_ln376_5_fu_248_p1);

assign select_ln376_8_fu_284_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 3'd6 : select_ln376_5_reg_406);

assign select_ln376_9_fu_296_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign select_ln376_fu_187_p3 = ((grp_fu_173_p2[0:0] === 1'b1) ? 2'd2 : zext_ln376_1_fu_184_p1);

assign zext_ln376_1_fu_184_p1 = icmp_ln376_reg_326;

assign zext_ln376_2_fu_195_p1 = select_ln376_fu_187_p3;

assign zext_ln376_3_fu_232_p1 = select_ln376_1_reg_366;

assign zext_ln376_4_fu_207_p1 = select_ln376_1_fu_200_p3;

assign zext_ln376_5_fu_248_p1 = select_ln376_3_reg_376;

assign zext_ln376_6_fu_243_p1 = select_ln376_4_fu_235_p3;

assign zext_ln376_7_fu_258_p1 = select_ln376_5_fu_251_p3;

assign zext_ln376_8_fu_291_p1 = select_ln376_8_fu_284_p3;

assign zext_ln376_fu_179_p1 = grp_fu_173_p2;

always @ (posedge ap_clk) begin
    zext_ln376_1_reg_341[1] <= 1'b0;
end

endmodule //getFinalLowestState
