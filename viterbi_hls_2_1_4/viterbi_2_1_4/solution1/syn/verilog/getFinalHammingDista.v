// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getFinalHammingDista (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        HammingTable_hammingDistances_finalStates_address0,
        HammingTable_hammingDistances_finalStates_ce0,
        HammingTable_hammingDistances_finalStates_q0,
        HammingTable_hammingDistances_finalStates_address1,
        HammingTable_hammingDistances_finalStates_ce1,
        HammingTable_hammingDistances_finalStates_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_iter0_fsm_state1 = 4'd1;
parameter    ap_ST_iter0_fsm_state2 = 4'd2;
parameter    ap_ST_iter0_fsm_state3 = 4'd4;
parameter    ap_ST_iter0_fsm_state4 = 4'd8;
parameter    ap_ST_iter1_fsm_state5 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [2:0] HammingTable_hammingDistances_finalStates_address0;
output   HammingTable_hammingDistances_finalStates_ce0;
input  [7:0] HammingTable_hammingDistances_finalStates_q0;
output  [2:0] HammingTable_hammingDistances_finalStates_address1;
output   HammingTable_hammingDistances_finalStates_ce1;
input  [7:0] HammingTable_hammingDistances_finalStates_q1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] HammingTable_hammingDistances_finalStates_address0;
reg HammingTable_hammingDistances_finalStates_ce0;
reg[2:0] HammingTable_hammingDistances_finalStates_address1;
reg HammingTable_hammingDistances_finalStates_ce1;

reg   [3:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire    ap_CS_iter0_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state5;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [7:0] HammingTable_hamming_27_reg_161;
wire    ap_CS_iter0_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] HammingTable_hamming_27_reg_161_pp0_iter0_reg;
reg   [7:0] HammingTable_hamming_29_reg_166;
reg   [7:0] HammingTable_hamming_29_reg_166_pp0_iter0_reg;
reg   [7:0] HammingTable_hamming_31_reg_181;
wire    ap_CS_iter0_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [7:0] HammingTable_hamming_31_reg_181_pp0_iter0_reg;
reg   [7:0] HammingTable_hamming_33_reg_186;
reg   [7:0] HammingTable_hamming_33_reg_186_pp0_iter0_reg;
reg   [7:0] HammingTable_hamming_35_reg_201;
reg   [7:0] HammingTable_hamming_37_reg_206;
reg   [3:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 4'd1;
#0 ap_CS_iter1_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
        HammingTable_hamming_27_reg_161 <= HammingTable_hammingDistances_finalStates_q0;
        HammingTable_hamming_29_reg_166 <= HammingTable_hammingDistances_finalStates_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        HammingTable_hamming_27_reg_161_pp0_iter0_reg <= HammingTable_hamming_27_reg_161;
        HammingTable_hamming_29_reg_166_pp0_iter0_reg <= HammingTable_hamming_29_reg_166;
        HammingTable_hamming_31_reg_181_pp0_iter0_reg <= HammingTable_hamming_31_reg_181;
        HammingTable_hamming_33_reg_186_pp0_iter0_reg <= HammingTable_hamming_33_reg_186;
        HammingTable_hamming_35_reg_201 <= HammingTable_hammingDistances_finalStates_q0;
        HammingTable_hamming_37_reg_206 <= HammingTable_hammingDistances_finalStates_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
        HammingTable_hamming_31_reg_181 <= HammingTable_hammingDistances_finalStates_q0;
        HammingTable_hamming_33_reg_186 <= HammingTable_hammingDistances_finalStates_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state4)) begin
        HammingTable_hammingDistances_finalStates_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_iter0_fsm_state3)) begin
        HammingTable_hammingDistances_finalStates_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_iter0_fsm_state2)) begin
        HammingTable_hammingDistances_finalStates_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        HammingTable_hammingDistances_finalStates_address0 = 64'd0;
    end else begin
        HammingTable_hammingDistances_finalStates_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state4)) begin
        HammingTable_hammingDistances_finalStates_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_iter0_fsm_state3)) begin
        HammingTable_hammingDistances_finalStates_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_iter0_fsm_state2)) begin
        HammingTable_hammingDistances_finalStates_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        HammingTable_hammingDistances_finalStates_address1 = 64'd1;
    end else begin
        HammingTable_hammingDistances_finalStates_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1)))) begin
        HammingTable_hammingDistances_finalStates_ce0 = 1'b1;
    end else begin
        HammingTable_hammingDistances_finalStates_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state2)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1)))) begin
        HammingTable_hammingDistances_finalStates_ce1 = 1'b1;
    end else begin
        HammingTable_hammingDistances_finalStates_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end
        end
        ap_ST_iter0_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state2))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state2;
            end
        end
        ap_ST_iter0_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state3))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state3;
            end
        end
        ap_ST_iter0_fsm_state4 : begin
            if (~((1'b0 == ap_ce) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state5)) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state0)))) begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter0_fsm = ap_ST_iter0_fsm_state4;
            end
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state5 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end else if (((1'b1 == ap_ce) & ((1'b0 == ap_CS_iter0_fsm_state4) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter0_fsm_state4))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b0 == ap_ce) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state5)) | ((1'b0 == ap_ce) & (1'b1 == ap_CS_iter1_fsm_state0))) & (1'b1 == ap_CS_iter0_fsm_state4))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state5;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter0_fsm_state2 = ap_CS_iter0_fsm[32'd1];

assign ap_CS_iter0_fsm_state3 = ap_CS_iter0_fsm[32'd2];

assign ap_CS_iter0_fsm_state4 = ap_CS_iter0_fsm[32'd3];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state5 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return_0 = HammingTable_hamming_27_reg_161_pp0_iter0_reg;

assign ap_return_1 = HammingTable_hamming_29_reg_166_pp0_iter0_reg;

assign ap_return_2 = HammingTable_hamming_31_reg_181_pp0_iter0_reg;

assign ap_return_3 = HammingTable_hamming_33_reg_186_pp0_iter0_reg;

assign ap_return_4 = HammingTable_hamming_35_reg_201;

assign ap_return_5 = HammingTable_hamming_37_reg_206;

assign ap_return_6 = HammingTable_hammingDistances_finalStates_q0;

assign ap_return_7 = HammingTable_hammingDistances_finalStates_q1;

endmodule //getFinalHammingDista
